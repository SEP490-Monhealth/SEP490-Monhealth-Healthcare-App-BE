using System.Text;
using System.Text.Json;
using MediatR;
using Microsoft.Extensions.Configuration;
using Monhealth.Application.Contracts.Persistence;
using Monhealth.Domain;

namespace Monhealth.Application
{
    public class ChatBotAiListQueryHandler : IRequestHandler<ChatBotAiListQuery, (ChatBotAi, HealthPlanResponseDto)>
    {
        private readonly IFoodRepository _foodRepository;
        private readonly IWorkoutRepository _workoutRepository;
        private readonly IUserRepository _userRepository;
        private readonly IGoalRepository _goalRepository;
        private readonly IMetricRepository _metricRepository;
        private readonly HttpClient _httpClient;
        private readonly string _geminiApiKey;

        public ChatBotAiListQueryHandler(
            IMetricRepository metricRepository,
            IFoodRepository foodRepository,
            IWorkoutRepository workoutRepository,
            IUserRepository userRepository,
            IGoalRepository goalRepository,
            HttpClient httpClient,
            IConfiguration configuration)
        {
            _foodRepository = foodRepository;
            _workoutRepository = workoutRepository;
            _userRepository = userRepository;
            _goalRepository = goalRepository;
            _metricRepository = metricRepository;
            _httpClient = httpClient;
            _geminiApiKey = configuration["Gemini:ApiKey"];
        }

        public async Task<(ChatBotAi, HealthPlanResponseDto)> Handle(ChatBotAiListQuery request, CancellationToken cancellationToken)
        {
            var user = await _userRepository.GetByIdAsync(request.UserId);
            if (user == null) throw new Exception("User not found.");

            var metrics = await _metricRepository.GetByUserIdAsync(request.UserId);
            if (metrics == null) throw new Exception("Metrics not found for the user.");

            var foods = await _foodRepository.GetFoodByUserHasNoAllergiesAsync(request.UserId) ?? new List<Food>();
            foods = foods.Where(f => f != null).ToList();

            var workouts = await _workoutRepository.GetAllAsync() ?? new List<Workout>();
            var goal = await _goalRepository.GetByUserIdAsync(request.UserId);

            var workoutNames = workouts
                .Where(w => !string.IsNullOrEmpty(w.WorkoutName))
                .Select(w => w.WorkoutName)
                .ToList();

            var foodDTOs = foods
                .Where(f => f != null && f.Nutrition != null)
                .GroupBy(f => new
                {
                    Calories = f.Nutrition?.Calories ?? 0,
                    Protein = f.Nutrition?.Protein ?? 0,
                    Carbs = f.Nutrition?.Carbs ?? 0,
                    Fat = f.Nutrition?.Fat ?? 0
                })
                .Select(g => new FoodDTO12
                {
                    FoodName = g.Where(f => !string.IsNullOrEmpty(f.FoodName)).Select(f => f.FoodName).ToList(),
                    Calories = g.Key.Calories,
                    Protein = g.Key.Protein,
                    Carbs = g.Key.Carbs,
                    Fat = g.Key.Fat
                })
                .ToList();

            var chatBotAi = new ChatBotAi
            {
                UserName = user.UserName ?? string.Empty,
                Metric = new MetricDTO12
                {
                    Height = metrics.Height,
                    Weight = metrics.Weight,
                    Bmi = metrics.Bmi,
                    Bmr = metrics.Bmr,
                    Tdee = metrics.Tdee,
                    Ibw = metrics.Ibw
                },
                Goal = new GoalDTO12
                {
                    CaloriesBurnedGoal = goal.CaloriesBurnedGoal,
                    CaloriesGoal = goal.CaloriesGoal,
                    CaloriesRatio = goal.CaloriesRatio,
                    CarbsGoal = goal.CarbsGoal,
                    FatGoal = goal.FatGoal,
                    FiberGoal = goal.FiberGoal,
                    ProteinGoal = goal.ProteinGoal,
                    SugarGoal = goal.SugarGoal,
                    WeightGoal = goal.WeightGoal,
                    WorkoutDurationGoal = goal.WorkoutDurationGoal
                },
                Foods = foodDTOs,
                Workouts = new WorkoutDTO12
                {
                    WorkoutName = workoutNames
                }
            };

            // G·ªçi API Gemini v·ªõi d·ªØ li·ªáu v√† truy v·∫•n
            string aiResultJson = await CallGeminiApi(chatBotAi, request.Query);

            // Deserialize JSON t·ª´ Gemini th√†nh DTO
            var healthPlan = JsonSerializer.Deserialize<HealthPlanResponseDto>(aiResultJson, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
                PropertyNamingPolicy = null // Gi·ªØ nguy√™n t√™n key ti·∫øng Vi·ªát trong JSON
            });

            if (healthPlan == null)
                throw new Exception("Kh√¥ng th·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu ph·∫£n h·ªìi t·ª´ Gemini API.");

            return (chatBotAi, healthPlan);
        }

        private async Task<string> CallGeminiApi(ChatBotAi chatBotAi, string query)
        {
            var url = $"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={_geminiApiKey}";

            var fullPrompt = @$"
B·∫°n l√† m·ªôt chuy√™n gia t∆∞ v·∫•n dinh d∆∞·ª°ng v√† hu·∫•n luy·ªán th·ªÉ h√¨nh trong m·ªôt h·ªá th·ªëng chƒÉm s√≥c s·ª©c kh·ªèe c√° nh√¢n h√≥a. 
Nhi·ªám v·ª• c·ªßa b·∫°n l√† ph√¢n t√≠ch d·ªØ li·ªáu th·ªÉ tr·∫°ng, m·ª•c ti√™u c√° nh√¢n, danh s√°ch m√≥n ƒÉn v√† c√°c b√†i t·∫≠p hi·ªán c√≥ 
ƒë·ªÉ x√¢y d·ª±ng m·ªôt **k·∫ø ho·∫°ch ƒÉn u·ªëng v√† luy·ªán t·∫≠p ph√π h·ª£p trong ng√†y**, h·ªó tr·ª£ ng∆∞·ªùi d√πng ƒë·∫°t m·ª•c ti√™u tƒÉng c√¢n, tƒÉng c∆°, c·∫£i thi·ªán th·ªÉ ch·∫•t.

---

üß† **Y√™u c·∫ßu c√° nh√¢n t·ª´ ng∆∞·ªùi d√πng**:

---

D∆∞·ªõi ƒë√¢y l√† d·ªØ li·ªáu ƒë·∫ßu v√†o t·ª´ ng∆∞·ªùi d√πng:

1. **Th·ªÉ tr·∫°ng hi·ªán t·∫°i (metric)**:
{JsonSerializer.Serialize(chatBotAi.Metric)}

2. **M·ª•c ti√™u c√° nh√¢n (goal)**:
{JsonSerializer.Serialize(chatBotAi.Goal)}

3. **Danh s√°ch m√≥n ƒÉn kh·∫£ d·ª•ng (foods)**:
{JsonSerializer.Serialize(chatBotAi.Foods)}

4. **Danh s√°ch b√†i t·∫≠p s·∫µn c√≥ (workouts)**:
{JsonSerializer.Serialize(chatBotAi.Workouts)}

---

‚úÖ **Y√™u c·∫ßu l·∫≠p k·∫ø ho·∫°ch trong ng√†y**:

- Ch·∫ø ƒë·ªô ƒÉn chia th√†nh 3 b·ªØa ch√≠nh v√† 1 b·ªØa ph·ª• (Snack, n·∫øu c·∫ßn).
- ∆Øu ti√™n l·ª±a ch·ªçn m√≥n ƒÉn t·ª´ danh s√°ch `foods`, d·ªÖ t√¨m t·∫°i Vi·ªát Nam, h·ªó tr·ª£ t·ªëi ∆∞u cho **tƒÉng c√¢n l√†nh m·∫°nh v√† ph√°t tri·ªÉn c∆° b·∫Øp**.
- T·ªïng nƒÉng l∆∞·ª£ng v√† d∆∞·ª°ng ch·∫•t ti√™u th·ª• trong ng√†y n√™n ti·ªám c·∫≠n v·ªõi m·ª•c ti√™u: `CaloriesGoal`, `ProteinGoal`, `CarbsGoal`, `FatGoal`.
- Ghi r√µ t·ªïng nƒÉng l∆∞·ª£ng ti√™u th·ª• v√† **gi·∫£i th√≠ch chi ti·∫øt** l√Ω do l·ª±a ch·ªçn m√≥n ƒÉn, k√®m g·ª£i √Ω thay th·∫ø n·∫øu c√≥ d·ªã ·ª©ng ho·∫∑c h·∫°n ch·∫ø th·ª±c ph·∫©m.

- K·∫ø ho·∫°ch luy·ªán t·∫≠p g·ªìm 3 giai ƒëo·∫°n:
  - **Kh·ªüi ƒë·ªông** (5 ph√∫t)
  - **T·∫≠p ch√≠nh** (t·ªëi thi·ªÉu 25 ph√∫t)
  - **Gi√£n c∆°** (5 ph√∫t)
- B√†i t·∫≠p ch·ªçn t·ª´ danh s√°ch `workouts`, ph√π h·ª£p v·ªõi kh·∫£ nƒÉng, ƒë·∫£m b·∫£o th·ªùi l∆∞·ª£ng ‚â• `WorkoutDurationGoal` v√† ƒë·ªët ch√°y ‚â• `CaloriesBurnedGoal`.

---

üìå **Ch·ªâ tr·∫£ v·ªÅ ph·∫£n h·ªìi ·ªü d·∫°ng JSON h·ª£p l·ªá theo ƒë√∫ng c·∫•u tr√∫c d∆∞·ªõi ƒë√¢y. Kh√¥ng ƒë∆∞·ª£c th√™m m√¥ t·∫£, ti√™u ƒë·ªÅ, markdown ho·∫∑c k√Ω t·ª± n√†o b√™n ngo√†i JSON.**

```json
{{
  ""MealPlan"": {{
    ""Breakfast"": ""T√™n m√≥n ƒÉn s√°ng"",
    ""Lunch"": ""T√™n m√≥n ƒÉn tr∆∞a"",
    ""Dinner"": ""T√™n m√≥n ƒÉn t·ªëi"",
    ""Snack"": ""T√™n m√≥n ph·ª• ho·∫∑c null"",
    ""TotalCalories"": 0,
    ""Detail"": ""M√¥ t·∫£ chi ti·∫øt th√†nh ph·∫ßn dinh d∆∞·ª°ng, l√Ω do ch·ªçn t·ª´ng m√≥n, v√† g·ª£i √Ω thay th·∫ø n·∫øu c·∫ßn.""
  }},
  ""WorkoutRoutine"": [
    {{
      ""Stage"": ""Kh·ªüi ƒë·ªông"",
      ""Exercises"": [""T√™n b√†i t·∫≠p""],
      ""Duration"": 5
    }},
    {{
      ""Stage"": ""T·∫≠p ch√≠nh"",
      ""Exercises"": [""T√™n b√†i t·∫≠p""],
      ""Duration"": 25
    }},
    {{
      ""Stage"": ""Gi√£n c∆°"",
      ""Exercises"": [""T√™n b√†i t·∫≠p""],
      ""Duration"": 5
    }}
  ],
  ""T∆∞ v·∫•n t·ªïng quan t·ª´ AI"": ""Ph√¢n t√≠ch t·ªïng th·ªÉ v√† ƒë·ªãnh h∆∞·ªõng c·∫£i thi·ªán s·ª©c kh·ªèe."",
  ""Summary Conversation"": ""T√≥m t·∫Øt k·∫ø ho·∫°ch c√° nh√¢n h√≥a d·ª±a tr√™n d·ªØ li·ªáu ng∆∞·ªùi d√πng.""
}}
";


            var requestBody = new
            {
                contents = new[]
       {
        new
        {
            parts = new[]
            {
                new { text = fullPrompt }
            }
        }
    }
            };

            var jsonBody = JsonSerializer.Serialize(requestBody);
            var content = new StringContent(jsonBody, Encoding.UTF8, "application/json");

            var response = await _httpClient.PostAsync(url, content);
            var responseString = await response.Content.ReadAsStringAsync();

            if (!response.IsSuccessStatusCode)
                throw new Exception($"Gemini API call failed: {responseString}");

            try
            {
                using var doc = JsonDocument.Parse(responseString);
                var rawText = doc.RootElement
                    .GetProperty("candidates")[0]
                    .GetProperty("content")
                    .GetProperty("parts")[0]
                    .GetProperty("text")
                    .GetString();

                var cleanedJson = ExtractJsonFromMarkdown(rawText!);

                var result = JsonSerializer.Deserialize<HealthPlanResponseDto>(cleanedJson, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true,
                    PropertyNamingPolicy = null
                });

                if (result == null)
                    throw new Exception("Kh√¥ng th·ªÉ ph√¢n t√≠ch ph·∫£n h·ªìi JSON t·ª´ Gemini.");

                return JsonSerializer.Serialize(result, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true,
                    PropertyNamingPolicy = null
                });
            }
            catch (Exception ex)
            {
                throw new Exception($"L·ªói khi x·ª≠ l√Ω ph·∫£n h·ªìi Gemini: {ex.Message}\nRaw content: {responseString}");
            }
        }
        private string ExtractJsonFromMarkdown(string rawText)
        {
            if (string.IsNullOrWhiteSpace(rawText)) return string.Empty;

            var startIndex = rawText.IndexOf("{");
            var endIndex = rawText.LastIndexOf("}");

            if (startIndex >= 0 && endIndex > startIndex)
            {
                return rawText.Substring(startIndex, endIndex - startIndex + 1);
            }

            return rawText;
        }

    }
}