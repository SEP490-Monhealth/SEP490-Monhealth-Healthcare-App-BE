// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Monhealth.Identity.Dbcontexts;

#nullable disable

namespace Monhealth.Identity.Migrations
{
    [DbContext(typeof(MonhealthDbcontext))]
    [Migration("20241224094920_FixFoodStatus")]
    partial class FixFoodStatus
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("c0278115-8549-4fad-890a-44f8e8fcc022"),
                            UserId = new Guid("277ea066-d041-40ff-9dae-6271dbd6fd87")
                        },
                        new
                        {
                            RoleId = new Guid("322488f9-7aa9-49b0-b2b8-fd98b7b260fc"),
                            UserId = new Guid("9d7e87a9-b070-4607-a0b0-2d2322aece9b")
                        },
                        new
                        {
                            RoleId = new Guid("322488f9-7aa9-49b0-b2b8-fd98b7b260fc"),
                            UserId = new Guid("0075ba2c-f60d-4f75-b9f1-f71579bc4fd2")
                        },
                        new
                        {
                            RoleId = new Guid("322488f9-7aa9-49b0-b2b8-fd98b7b260fc"),
                            UserId = new Guid("3b1a8845-765f-4d91-984a-4e8a9d7d376e")
                        },
                        new
                        {
                            RoleId = new Guid("322488f9-7aa9-49b0-b2b8-fd98b7b260fc"),
                            UserId = new Guid("4565f47a-7239-4666-b9b4-0523b1d9ba3d")
                        },
                        new
                        {
                            RoleId = new Guid("322488f9-7aa9-49b0-b2b8-fd98b7b260fc"),
                            UserId = new Guid("1246b8e5-af73-4aa3-bdef-b8815e21a78b")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Monhealth.Domain.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("ee39be57-cf88-4420-8e19-606b2ed4dc6d"),
                            CategoryDescription = "Các món ăn từ tôm, cá, cua, mực, hàu, sò và các loại hải sản khác. Thích hợp cho những ai yêu thích hương vị biển cả",
                            CategoryImage = "https://firebasestorage.googleapis.com/v0/b/diamoondb-1412.appspot.com/o/Monhealth%2Fcategories%2Fcrab.png?alt=media&token=0cde2529-8e28-4b5e-80cf-660f27564de2",
                            CategoryName = "Hải sản",
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = new Guid("99052f16-54f5-4456-80f8-1691db7c90f2"),
                            CategoryDescription = "Bao gồm các món ăn từ thịt bò, thịt gà, thịt lợn, thịt vịt và các loại thịt khác. Là lựa chọn phổ biến trong bữa ăn chính",
                            CategoryImage = "https://firebasestorage.googleapis.com/v0/b/diamoondb-1412.appspot.com/o/Monhealth%2Fcategories%2Fsteak.png?alt=media&token=dfffb9c2-2964-40cc-8712-e83b4200e7af",
                            CategoryName = "Thịt",
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = new Guid("6d3beea0-5f00-4a8a-ab52-d5774e3c5770"),
                            CategoryDescription = "Món ăn từ rau xanh, củ quả và nấm. Phù hợp cho những ai yêu thích thực phẩm tươi sạch, giàu dinh dưỡng",
                            CategoryImage = "https://firebasestorage.googleapis.com/v0/b/diamoondb-1412.appspot.com/o/Monhealth%2Fcategories%2Fbroccoli.png?alt=media&token=6746e0eb-bcf0-44d1-830a-79821f735f84",
                            CategoryName = "Rau củ",
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = new Guid("4c35b262-4c08-4624-900b-e22ba8988c92"),
                            CategoryDescription = "Gạo, mì, bánh mì, yến mạch, và các loại hạt ngũ cốc. Là nguồn cung cấp năng lượng chính trong ngày",
                            CategoryImage = "https://firebasestorage.googleapis.com/v0/b/diamoondb-1412.appspot.com/o/Monhealth%2Fcategories%2Frice.png?alt=media&token=1ef6ca23-003f-4415-9ce4-3a3f5cd8e65e",
                            CategoryName = "Ngũ cốc",
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = new Guid("fe3a3546-b294-4665-9c82-092d4ab5a187"),
                            CategoryDescription = "Các loại hạt (hạnh nhân, hạt chia, hạt điều) và đậu (đậu nành, đậu xanh, đậu đen). Giàu protein và chất xơ",
                            CategoryImage = "https://firebasestorage.googleapis.com/v0/b/diamoondb-1412.appspot.com/o/Monhealth%2Fcategories%2Fgrain.png?alt=media&token=e224b22a-925e-4aa4-ab50-d74309ba71f4",
                            CategoryName = "Hạt và đậu",
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = new Guid("22ee062d-4904-4c64-a783-74b3e142aac7"),
                            CategoryDescription = "Các món ăn từ thực vật, đậu phụ, và nguyên liệu không sử dụng thịt, phù hợp với người ăn chay hoặc muốn đổi vị thanh đạm",
                            CategoryImage = "https://firebasestorage.googleapis.com/v0/b/diamoondb-1412.appspot.com/o/Monhealth%2Fcategories%2Fradish.png?alt=media&token=c27e26f3-3f39-42ec-bf40-94c9abb074d5",
                            CategoryName = "Món chay",
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = new Guid("78651ea5-2013-4e50-a55f-714de91a712d"),
                            CategoryDescription = "Bánh ngọt, kẹo, kem, và các món tráng miệng ngọt ngào, lý tưởng cho những ai yêu thích đồ ngọt",
                            CategoryImage = "https://firebasestorage.googleapis.com/v0/b/diamoondb-1412.appspot.com/o/Monhealth%2Fcategories%2Fcupcake.png?alt=media&token=8721bd49-186f-4ccf-a85a-64008e4c8e38",
                            CategoryName = "Món ngọt",
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = new Guid("f63dd434-9796-46ab-95ad-759bfac51e26"),
                            CategoryDescription = "Bao gồm nước ép, sinh tố, trà, cà phê, và các loại đồ uống giải khát khác",
                            CategoryImage = "https://firebasestorage.googleapis.com/v0/b/diamoondb-1412.appspot.com/o/Monhealth%2Fcategories%2Fcoffee-cup.png?alt=media&token=14155321-cd44-422b-a49f-3e34636d7f85",
                            CategoryName = "Đồ uống",
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = new Guid("fc7f66aa-8c09-46db-a679-be440e3ed91f"),
                            CategoryDescription = "Kimchi, dưa chua, sữa chua, rượu vang và các món ăn lên men, tốt cho tiêu hóa và sức khỏe đường ruột",
                            CategoryImage = "https://firebasestorage.googleapis.com/v0/b/diamoondb-1412.appspot.com/o/Monhealth%2Fcategories%2Fpickles.png?alt=media&token=2a078ceb-40a9-403d-a68c-9682faf1b97f",
                            CategoryName = "Món lên men",
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = new Guid("19fe32e8-9e15-486b-9398-f0116cd5019a"),
                            CategoryDescription = "Hoa quả tươi hoặc chế biến như salad trái cây, nước ép, sinh tố, cung cấp vitamin và khoáng chất",
                            CategoryImage = "https://firebasestorage.googleapis.com/v0/b/diamoondb-1412.appspot.com/o/Monhealth%2Fcategories%2Fapple.png?alt=media&token=106a39ee-5c36-4c27-8bbe-c850ee19cb02",
                            CategoryName = "Trái cây",
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = new Guid("bd21fd3f-8b19-4756-9da8-8ea32fc646d6"),
                            CategoryDescription = "Pizza, burger, khoai tây chiên, gà rán, và các món ăn tiện lợi, phù hợp cho những ai bận rộn",
                            CategoryImage = "https://firebasestorage.googleapis.com/v0/b/diamoondb-1412.appspot.com/o/Monhealth%2Fcategories%2Fburger.png?alt=media&token=66dd457f-64d3-4b66-851c-10eba13fdc7d",
                            CategoryName = "Đồ ăn nhanh",
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = new Guid("cd017b8a-fbed-4399-99ed-b59eec9b9551"),
                            CategoryDescription = "Bánh mì, bánh ngọt, bánh mặn, bánh hấp, và các món bánh truyền thống hay hiện đại",
                            CategoryImage = "https://firebasestorage.googleapis.com/v0/b/diamoondb-1412.appspot.com/o/Monhealth%2Fcategories%2Fbread.png?alt=media&token=decd5d8c-994f-4a71-ab9e-2096209515fc",
                            CategoryName = "Bánh các loại",
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = new Guid("5c899b0d-5d6a-4366-a4fd-797ab5b2168e"),
                            CategoryDescription = "Snack, khô gà, khô bò, bim bim, và các món ăn nhẹ lý tưởng cho những lúc giải trí hay nghỉ ngơi",
                            CategoryImage = "https://firebasestorage.googleapis.com/v0/b/diamoondb-1412.appspot.com/o/Monhealth%2Fcategories%2Fpopcorn.png?alt=media&token=8aecf5e1-071f-4b0f-8e55-a2c47b289def",
                            CategoryName = "Đồ ăn vặt",
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Monhealth.Domain.Consultant", b =>
                {
                    b.Property<Guid>("ConsultantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ConsultantId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Consultants");
                });

            modelBuilder.Entity("Monhealth.Domain.DailyMeal", b =>
                {
                    b.Property<Guid>("DailyMealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DailyStatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("MealDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("TotalCalories")
                        .HasColumnType("real");

                    b.Property<float>("TotalCarbs")
                        .HasColumnType("real");

                    b.Property<float>("TotalFats")
                        .HasColumnType("real");

                    b.Property<float>("TotalProteins")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DailyMealId");

                    b.HasIndex("DailyStatId");

                    b.ToTable("DailyMeals");
                });

            modelBuilder.Entity("Monhealth.Domain.DailyStat", b =>
                {
                    b.Property<Guid>("DailyStatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MonthlyStatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("TotalCaloriesBurned")
                        .HasColumnType("real");

                    b.Property<float>("TotalCaloriesIntake")
                        .HasColumnType("real");

                    b.Property<float>("TotalCarbs")
                        .HasColumnType("real");

                    b.Property<float>("TotalFat")
                        .HasColumnType("real");

                    b.Property<float>("TotalProteins")
                        .HasColumnType("real");

                    b.Property<float>("TotalWaterIntake")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DailyStatId");

                    b.ToTable("DailyStats");
                });

            modelBuilder.Entity("Monhealth.Domain.Department", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Monhealth.Domain.Food", b =>
                {
                    b.Property<Guid>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FoodDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FoodId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Foods");

                    b.HasData(
                        new
                        {
                            FoodId = new Guid("b6fa82bc-715c-42da-af22-93290d3f2421"),
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodDescription = "Cơm là một món phổ biến trong ẩm thực Việt Nam, thường được ăn kèm với các món khác như cá, thịt, rau",
                            FoodName = "Cơm trắng",
                            FoodType = "",
                            Status = true,
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("9d7e87a9-b070-4607-a0b0-2d2322aece9b")
                        },
                        new
                        {
                            FoodId = new Guid("a3be942d-a225-44fb-9c98-22a109995145"),
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodDescription = "Thịt heo nạc mềm, ít mỡ, thường được dùng trong các món xào, kho hoặc nướng",
                            FoodName = "Thịt heo nạc",
                            FoodType = "",
                            Status = true,
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("9d7e87a9-b070-4607-a0b0-2d2322aece9b")
                        },
                        new
                        {
                            FoodId = new Guid("f789601f-8026-499b-98cb-0f189926094a"),
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodDescription = "Rau muống thường được dùng để xào hoặc nấu canh, có vị ngọt, giòn và dễ chế biến",
                            FoodName = "Rau muống",
                            FoodType = "",
                            Status = true,
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("9d7e87a9-b070-4607-a0b0-2d2322aece9b")
                        },
                        new
                        {
                            FoodId = new Guid("52c7f28c-1d5a-470e-87cd-2be1ab0ac3db"),
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodDescription = "Tôm biển ngọt, mềm, thường được chế biến thành các món canh, xào hoặc nướng",
                            FoodName = "Tôm biển",
                            FoodType = "",
                            Status = true,
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("9d7e87a9-b070-4607-a0b0-2d2322aece9b")
                        },
                        new
                        {
                            FoodId = new Guid("c82a256d-5573-4d27-b045-a411db42e694"),
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodDescription = "Xúc xích là món ăn nhanh, thường được chế biến sẵn, có thể chiên, nướng hoặc ăn kèm trong các món salad",
                            FoodName = "Xúc xích",
                            FoodType = "",
                            Status = true,
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("9d7e87a9-b070-4607-a0b0-2d2322aece9b")
                        },
                        new
                        {
                            FoodId = new Guid("c567f8a9-71e4-4167-839d-a839ece79427"),
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodDescription = "Bỏng ngô là món ăn vặt giòn nhẹ, phổ biến trong các buổi tiệc hoặc xem phim, có thể ăn trực tiếp hoặc kết hợp với gia vị",
                            FoodName = "Bỏng ngô",
                            FoodType = "",
                            Status = true,
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("9d7e87a9-b070-4607-a0b0-2d2322aece9b")
                        },
                        new
                        {
                            FoodId = new Guid("00a16b6c-9396-4389-95fd-205f72fe5164"),
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodDescription = "Nem chua là món ăn đặc trưng miền Bắc, được làm từ thịt heo lên men, có vị chua, cay, thường ăn kèm với rau sống",
                            FoodName = "Nem chua",
                            FoodType = "",
                            Status = true,
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("9d7e87a9-b070-4607-a0b0-2d2322aece9b")
                        },
                        new
                        {
                            FoodId = new Guid("80c5e605-307f-4fef-bdf8-9967a800eab9"),
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodDescription = "Mãng cầu là trái cây có vị ngọt, chua nhẹ, thường được ăn tươi hoặc làm sinh tố giải nhiệt",
                            FoodName = "Mãng cầu",
                            FoodType = "",
                            Status = true,
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("9d7e87a9-b070-4607-a0b0-2d2322aece9b")
                        },
                        new
                        {
                            FoodId = new Guid("d65bff7e-4a2d-498b-97b2-676d4dd92a90"),
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodDescription = "Bắp luộc là món ăn vặt phổ biến, ngọt và mềm, thường được ăn vào mùa hè, có thể ăn kèm với muối hoặc bơ",
                            FoodName = "Bắp luộc",
                            FoodType = "",
                            Status = true,
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("9d7e87a9-b070-4607-a0b0-2d2322aece9b")
                        },
                        new
                        {
                            FoodId = new Guid("ced123e2-0b86-444b-ac83-7dba6860e354"),
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodDescription = "Chả giò là món ăn chiên giòn, nhân thịt, tôm, rau, thường được ăn kèm với nước chấm và rau sống",
                            FoodName = "Chả giò",
                            FoodType = "",
                            Status = true,
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("9d7e87a9-b070-4607-a0b0-2d2322aece9b")
                        },
                        new
                        {
                            FoodId = new Guid("d4f8f2c7-5318-4f07-803d-2b093be4d6c7"),
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodDescription = "Bưởi có vị chua ngọt, thường được ăn tươi hoặc làm món tráng miệng, rất giàu vitamin C",
                            FoodName = "Bưởi",
                            FoodType = "",
                            Status = true,
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("9d7e87a9-b070-4607-a0b0-2d2322aece9b")
                        },
                        new
                        {
                            FoodId = new Guid("e34e9f9b-2d65-4e94-bcf0-37f5903c38b9"),
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodDescription = "Giá đỗ giòn, có thể ăn sống trong salad hoặc xào với thịt, là nguồn cung cấp vitamin rất tốt cho cơ thể",
                            FoodName = "Giá đỗ",
                            FoodType = "",
                            Status = true,
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("9d7e87a9-b070-4607-a0b0-2d2322aece9b")
                        },
                        new
                        {
                            FoodId = new Guid("e1b0767d-4b3b-42ea-820f-2154f7883ab9"),
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodDescription = "Nấm kim châm nhỏ, ngọt, dùng để xào, nấu canh hoặc ăn sống, bổ dưỡng và dễ chế biến",
                            FoodName = "Nấm kim châm",
                            FoodType = "",
                            Status = true,
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("9d7e87a9-b070-4607-a0b0-2d2322aece9b")
                        },
                        new
                        {
                            FoodId = new Guid("62cd0ff3-f69e-4a5f-bc8d-94f1f94e4552"),
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodDescription = "Khoai tây là nguyên liệu phổ biến, có thể nấu canh, chiên hoặc nướng, chứa nhiều tinh bột và dinh dưỡng",
                            FoodName = "Khoai tây",
                            FoodType = "",
                            Status = true,
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("9d7e87a9-b070-4607-a0b0-2d2322aece9b")
                        },
                        new
                        {
                            FoodId = new Guid("dd918def-34c2-4f5c-b402-6d51d8a1c604"),
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodDescription = "Bầu là một loại quả mềm, thường được dùng trong các món canh hoặc xào, có vị ngọt mát và thanh",
                            FoodName = "Bầu",
                            FoodType = "",
                            Status = true,
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("9d7e87a9-b070-4607-a0b0-2d2322aece9b")
                        },
                        new
                        {
                            FoodId = new Guid("b2fe4b42-56e1-4630-99e1-bb74d6d5ab2f"),
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodDescription = "Đậu phộng là món ăn vặt giòn, có thể ăn sống, rang muối hoặc dùng làm gia vị trong các món ăn",
                            FoodName = "Đậu phộng",
                            FoodType = "",
                            Status = true,
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("9d7e87a9-b070-4607-a0b0-2d2322aece9b")
                        },
                        new
                        {
                            FoodId = new Guid("c4f9e44d-b7f6-4530-8b2e-b64c8f993f2a"),
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodDescription = "Thịt bò có hương vị đặc trưng, mềm và giàu protein, thường được dùng trong các món xào, nướng hoặc làm súp",
                            FoodName = "Thịt bò",
                            FoodType = "",
                            Status = true,
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("9d7e87a9-b070-4607-a0b0-2d2322aece9b")
                        },
                        new
                        {
                            FoodId = new Guid("97a2fdd1-ff1f-4f5b-85cf-9f68b0cf2b91"),
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodDescription = "Chuối tây ngọt, mềm, dễ tiêu hóa, thường được ăn trực tiếp hoặc chế biến thành các món tráng miệng",
                            FoodName = "Chuối tây",
                            FoodType = "",
                            Status = true,
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("9d7e87a9-b070-4607-a0b0-2d2322aece9b")
                        },
                        new
                        {
                            FoodId = new Guid("3b372064-e2a9-4729-b725-635e54e11c5d"),
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodDescription = "Bún tươi là món ăn phổ biến trong các bữa ăn miền Bắc và miền Nam, dùng với nước lèo, thịt, rau hoặc hải sản",
                            FoodName = "Bún tươi",
                            FoodType = "",
                            Status = true,
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("9d7e87a9-b070-4607-a0b0-2d2322aece9b")
                        },
                        new
                        {
                            FoodId = new Guid("a3c8f7f1-dfe7-4e1e-9e9d-36a3c6b395b7"),
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodDescription = "Sầu riêng là trái cây đặc trưng của miền Nam, có mùi rất mạnh, ngọt béo, được yêu thích làm món tráng miệng",
                            FoodName = "Sầu riêng",
                            FoodType = "",
                            Status = true,
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("9d7e87a9-b070-4607-a0b0-2d2322aece9b")
                        });
                });

            modelBuilder.Entity("Monhealth.Domain.FoodPortion", b =>
                {
                    b.Property<Guid>("FoodPortionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PortionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FoodPortionId");

                    b.HasIndex("FoodId");

                    b.HasIndex("PortionId");

                    b.ToTable("FoodPortions");
                });

            modelBuilder.Entity("Monhealth.Domain.Goal", b =>
                {
                    b.Property<Guid>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GoalType")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GoalId");

                    b.HasIndex("UserId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("Monhealth.Domain.InterestFood", b =>
                {
                    b.Property<Guid>("InterestFoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Categories")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Foods")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nutrition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InterestFoodId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("InterestFoods");
                });

            modelBuilder.Entity("Monhealth.Domain.Meal", b =>
                {
                    b.Property<Guid>("MealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DailyMealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MealType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MealId");

                    b.HasIndex("DailyMealId");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("Monhealth.Domain.MealFood", b =>
                {
                    b.Property<Guid>("MealFoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PortionSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MealFoodId");

                    b.HasIndex("FoodId");

                    b.HasIndex("MealId");

                    b.ToTable("MealFoods");
                });

            modelBuilder.Entity("Monhealth.Domain.MealUserFood", b =>
                {
                    b.Property<Guid>("MealUserFoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PortionSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MealUserFoodId");

                    b.HasIndex("MealId");

                    b.ToTable("MealUserFoods");
                });

            modelBuilder.Entity("Monhealth.Domain.Metric", b =>
                {
                    b.Property<Guid>("MetricId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("ActivityLevel")
                        .HasColumnType("real");

                    b.Property<float>("Bmi")
                        .HasColumnType("real");

                    b.Property<float>("Bmr")
                        .HasColumnType("real");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<float>("Ibw")
                        .HasColumnType("real");

                    b.Property<float>("Tdee")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("MetricId");

                    b.HasIndex("UserId");

                    b.ToTable("Metrics");
                });

            modelBuilder.Entity("Monhealth.Domain.Nutrition", b =>
                {
                    b.Property<Guid>("NutritionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Calories")
                        .HasColumnType("real");

                    b.Property<float>("Carbs")
                        .HasColumnType("real");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Fat")
                        .HasColumnType("real");

                    b.Property<float>("Fiber")
                        .HasColumnType("real");

                    b.Property<Guid?>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Protein")
                        .HasColumnType("real");

                    b.Property<float>("Sugar")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NutritionId");

                    b.HasIndex("FoodId")
                        .IsUnique()
                        .HasFilter("[FoodId] IS NOT NULL");

                    b.ToTable("Nutritions");
                });

            modelBuilder.Entity("Monhealth.Domain.Portion", b =>
                {
                    b.Property<Guid>("PortionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MeasurementUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortionSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PortionWeight")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PortionId");

                    b.ToTable("Portions");

                    b.HasData(
                        new
                        {
                            PortionId = new Guid("d2f3a6c9-19c1-45fa-9a4f-3ad8396c19a7"),
                            MeasurementUnit = "g",
                            PortionSize = "Phần ăn",
                            PortionWeight = 100f
                        },
                        new
                        {
                            PortionId = new Guid("a44fd2e0-b595-4423-9e6f-42a010d96f66"),
                            MeasurementUnit = "g",
                            PortionSize = "Chén",
                            PortionWeight = 100f
                        });
                });

            modelBuilder.Entity("Monhealth.Domain.Target", b =>
                {
                    b.Property<Guid>("TargetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("DailyCalories")
                        .HasColumnType("real");

                    b.Property<int>("DailySteps")
                        .HasColumnType("int");

                    b.Property<float>("DailyWater")
                        .HasColumnType("real");

                    b.Property<int>("ExerciseMinutes")
                        .HasColumnType("int");

                    b.Property<Guid>("GoalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("TargetId");

                    b.HasIndex("GoalId");

                    b.ToTable("Targets");
                });

            modelBuilder.Entity("Monhealth.Identity.Models.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("322488f9-7aa9-49b0-b2b8-fd98b7b260fc"),
                            DisplayName = "Khách Hàng",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = new Guid("c0278115-8549-4fad-890a-44f8e8fcc022"),
                            DisplayName = "Tư Vấn Viên",
                            Name = "Consultant",
                            NormalizedName = "CONSULTANT"
                        },
                        new
                        {
                            Id = new Guid("1975eaae-fd39-417e-bfcc-5e09f963b95f"),
                            DisplayName = "Quản lí",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        });
                });

            modelBuilder.Entity("Monhealth.Identity.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("277ea066-d041-40ff-9dae-6271dbd6fd87"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "04cb390b-4008-4c46-9493-95ff62967622",
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "quocdai@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nguyen Quoc Dai",
                            LockoutEnabled = false,
                            NormalizedEmail = "QUOCDAI@GMAIL.COM",
                            NormalizedUserName = "DAINQ115",
                            PasswordHash = "AQAAAAIAAYagAAAAEGl1m+YzmedQqT3zkGohWgU4UJVVD5baBSZoV2Fkme2pr3ozFRbaBsvhjnCJuyYK/g==",
                            PhoneNumber = "0932748924",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "63248b0b-1a01-4481-9d42-38f8587ad801",
                            Status = true,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "dainq115"
                        },
                        new
                        {
                            Id = new Guid("9d7e87a9-b070-4607-a0b0-2d2322aece9b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "da598341-b74c-403e-8182-c28c0a976ee6",
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "toanvan@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Van Huu Toan",
                            LockoutEnabled = false,
                            NormalizedEmail = "TOANVAN@GMAIL.COM",
                            NormalizedUserName = "VIPRO123",
                            PasswordHash = "AQAAAAIAAYagAAAAEMe1m5tMqOUCCEkKbMr0/NFausTNB8VdvsX/XJ/3o9x0NQFeY0F4ej4lugqZJfMWFw==",
                            PhoneNumber = "0792766979",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e307b77d-68e3-4d87-9ae0-9b8cd100b028",
                            Status = true,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "vipro123"
                        },
                        new
                        {
                            Id = new Guid("0075ba2c-f60d-4f75-b9f1-f71579bc4fd2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ce591a76-3904-4a25-989d-5efd04f2fd3a",
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "khanhpham@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nguyen Pham Khanh",
                            LockoutEnabled = false,
                            NormalizedEmail = "KHANHPHAM@GMAIL.COM",
                            NormalizedUserName = "KUEM113",
                            PasswordHash = "AQAAAAIAAYagAAAAEFZl0SXFYo61CUiJOrgXKrdWgFS+z9cZa7AysuVUlWK54szLEDfK0wEq0Nb+/q5apg==",
                            PhoneNumber = "0969998878",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a1d2d5b4-e579-4fff-ae34-4c4e969510ce",
                            Status = true,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "kuem113"
                        },
                        new
                        {
                            Id = new Guid("3b1a8845-765f-4d91-984a-4e8a9d7d376e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "84fbd30e-5530-47a2-aae5-29163bacddf5",
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "khaitoi@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Phan Van Khai",
                            LockoutEnabled = false,
                            NormalizedEmail = "KHAITOI@GMAIL.COM",
                            NormalizedUserName = "XAUTRAI123",
                            PasswordHash = "AQAAAAIAAYagAAAAEOY4bH23R1inUB5/rnsRkz+UK9mlmDHCnqQg7F6l4FC9PAreyLiRTmJb+j46YSg3LA==",
                            PhoneNumber = "0963122758",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51b0ad1d-e562-462f-aa46-2c86a607a9bd",
                            Status = true,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "xautrai123"
                        },
                        new
                        {
                            Id = new Guid("4565f47a-7239-4666-b9b4-0523b1d9ba3d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9c5453a8-245c-4424-821e-f88addc67032",
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "quangdalat@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Quang La Tui",
                            LockoutEnabled = false,
                            NormalizedEmail = "QUANGDALAT@GMAIL.COM",
                            NormalizedUserName = "QUANGSPA009",
                            PasswordHash = "AQAAAAIAAYagAAAAEEsy0B5Ilkg6h9TylZhLs77IConbjb3rNrJBx6pypM0A1eLP9E0IyIRB2hOr88x9ag==",
                            PhoneNumber = "0999777712",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "efabfa99-8a62-4ea9-a280-d74449364b5e",
                            Status = true,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "quangspa09"
                        },
                        new
                        {
                            Id = new Guid("1246b8e5-af73-4aa3-bdef-b8815e21a78b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4d670377-b4be-4e9f-b1f0-f251410a4599",
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "duythunglungtinhiu@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Pham Hoai Duy",
                            LockoutEnabled = false,
                            NormalizedEmail = "DUYTHUNGLUNGTINHIU",
                            NormalizedUserName = "DUYPRO113",
                            PasswordHash = "AQAAAAIAAYagAAAAEGFri8s7hiKez3TMPV6K7XOvvZLvUb1P0di/NZJyFH7u71dh3g7d2IZDKW4fhPKjEg==",
                            PhoneNumber = "0555666612",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f2600d28-4763-4711-9be8-eef28123499f",
                            Status = true,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "duypro113"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Monhealth.Identity.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Monhealth.Identity.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Monhealth.Identity.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Monhealth.Identity.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monhealth.Identity.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Monhealth.Identity.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Monhealth.Domain.Consultant", b =>
                {
                    b.HasOne("Monhealth.Domain.Department", "Department")
                        .WithMany("Consultants")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monhealth.Identity.Models.AppUser", "AppUser")
                        .WithOne("Consultant")
                        .HasForeignKey("Monhealth.Domain.Consultant", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Monhealth.Domain.DailyMeal", b =>
                {
                    b.HasOne("Monhealth.Domain.DailyStat", "DailyStat")
                        .WithMany("DailyMeals")
                        .HasForeignKey("DailyStatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyStat");
                });

            modelBuilder.Entity("Monhealth.Domain.Food", b =>
                {
                    b.HasOne("Monhealth.Domain.Category", "Category")
                        .WithMany("Foods")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Monhealth.Identity.Models.AppUser", "AppUser")
                        .WithMany("Foods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Monhealth.Domain.FoodPortion", b =>
                {
                    b.HasOne("Monhealth.Domain.Food", "Food")
                        .WithMany("FoodPortions")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monhealth.Domain.Portion", "Portion")
                        .WithMany("FoodPortions")
                        .HasForeignKey("PortionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Portion");
                });

            modelBuilder.Entity("Monhealth.Domain.Goal", b =>
                {
                    b.HasOne("Monhealth.Identity.Models.AppUser", "AppUser")
                        .WithMany("Goals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Monhealth.Domain.InterestFood", b =>
                {
                    b.HasOne("Monhealth.Identity.Models.AppUser", "AppUser")
                        .WithOne("InterestFood")
                        .HasForeignKey("Monhealth.Domain.InterestFood", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Monhealth.Domain.Meal", b =>
                {
                    b.HasOne("Monhealth.Domain.DailyMeal", "DailyMeal")
                        .WithMany("Meals")
                        .HasForeignKey("DailyMealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyMeal");
                });

            modelBuilder.Entity("Monhealth.Domain.MealFood", b =>
                {
                    b.HasOne("Monhealth.Domain.Food", "Food")
                        .WithMany("MealFoods")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monhealth.Domain.Meal", "Meal")
                        .WithMany("MealFoods")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("Monhealth.Domain.MealUserFood", b =>
                {
                    b.HasOne("Monhealth.Domain.Meal", "Meal")
                        .WithMany("MealUserFoods")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("Monhealth.Domain.Metric", b =>
                {
                    b.HasOne("Monhealth.Identity.Models.AppUser", "AppUser")
                        .WithMany("Metrics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Monhealth.Domain.Nutrition", b =>
                {
                    b.HasOne("Monhealth.Domain.Food", "Food")
                        .WithOne("Nutrition")
                        .HasForeignKey("Monhealth.Domain.Nutrition", "FoodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Food");
                });

            modelBuilder.Entity("Monhealth.Domain.Target", b =>
                {
                    b.HasOne("Monhealth.Domain.Goal", "Goal")
                        .WithMany()
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("Monhealth.Domain.Category", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("Monhealth.Domain.DailyMeal", b =>
                {
                    b.Navigation("Meals");
                });

            modelBuilder.Entity("Monhealth.Domain.DailyStat", b =>
                {
                    b.Navigation("DailyMeals");
                });

            modelBuilder.Entity("Monhealth.Domain.Department", b =>
                {
                    b.Navigation("Consultants");
                });

            modelBuilder.Entity("Monhealth.Domain.Food", b =>
                {
                    b.Navigation("FoodPortions");

                    b.Navigation("MealFoods");

                    b.Navigation("Nutrition")
                        .IsRequired();
                });

            modelBuilder.Entity("Monhealth.Domain.Meal", b =>
                {
                    b.Navigation("MealFoods");

                    b.Navigation("MealUserFoods");
                });

            modelBuilder.Entity("Monhealth.Domain.Portion", b =>
                {
                    b.Navigation("FoodPortions");
                });

            modelBuilder.Entity("Monhealth.Identity.Models.AppUser", b =>
                {
                    b.Navigation("Consultant")
                        .IsRequired();

                    b.Navigation("Foods");

                    b.Navigation("Goals");

                    b.Navigation("InterestFood")
                        .IsRequired();

                    b.Navigation("Metrics");
                });
#pragma warning restore 612, 618
        }
    }
}
