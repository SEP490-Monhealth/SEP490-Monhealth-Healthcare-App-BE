// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Monhealth.Identity.Dbcontexts;

#nullable disable

namespace Monhealth.Identity.Migrations
{
    [DbContext(typeof(MonhealthDbcontext))]
    [Migration("20241217123429_SeedDataforFood")]
    partial class SeedDataforFood
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("322488f9-7aa9-49b0-b2b8-fd98b7b260fc"),
                            UserId = new Guid("277ea066-d041-40ff-9dae-6271dbd6fd87")
                        },
                        new
                        {
                            RoleId = new Guid("322488f9-7aa9-49b0-b2b8-fd98b7b260fc"),
                            UserId = new Guid("9d7e87a9-b070-4607-a0b0-2d2322aece9b")
                        },
                        new
                        {
                            RoleId = new Guid("322488f9-7aa9-49b0-b2b8-fd98b7b260fc"),
                            UserId = new Guid("0075ba2c-f60d-4f75-b9f1-f71579bc4fd2")
                        },
                        new
                        {
                            RoleId = new Guid("322488f9-7aa9-49b0-b2b8-fd98b7b260fc"),
                            UserId = new Guid("3b1a8845-765f-4d91-984a-4e8a9d7d376e")
                        },
                        new
                        {
                            RoleId = new Guid("322488f9-7aa9-49b0-b2b8-fd98b7b260fc"),
                            UserId = new Guid("4565f47a-7239-4666-b9b4-0523b1d9ba3d")
                        },
                        new
                        {
                            RoleId = new Guid("322488f9-7aa9-49b0-b2b8-fd98b7b260fc"),
                            UserId = new Guid("1246b8e5-af73-4aa3-bdef-b8815e21a78b")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Monhealth.Core.FoodCategory", b =>
                {
                    b.Property<Guid>("FoodCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FoodCategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodCategories");
                });

            modelBuilder.Entity("Monhealth.Domain.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("ee39be57-cf88-4420-8e19-606b2ed4dc6d"),
                            CategoryDescription = "Các bữa ăn nhanh, tiện lợi, thường được phục vụ trong môi trường nhịp độ nhanh.",
                            CategoryName = "Fast food",
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = new Guid("99052f16-54f5-4456-80f8-1691db7c90f2"),
                            CategoryDescription = "Thức ăn nhiều carbohydrate (carb) thường là những thực phẩm chứa hàm lượng tinh bột hoặc đường cao.",
                            CategoryName = "Nhiều carbs",
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = new Guid("6d3beea0-5f00-4a8a-ab52-d5774e3c5770"),
                            CategoryDescription = "Các món ăn đậm đà, cay nóng, thường được tăng cường với ớt và gia vị.",
                            CategoryName = "Nhiều gia vị",
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = new Guid("4c35b262-4c08-4624-900b-e22ba8988c92"),
                            CategoryDescription = "Các bữa ăn không có thịt hoặc cá, tập trung vào rau củ và ngũ cốc.",
                            CategoryName = "Đồ ăn chay",
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = new Guid("fe3a3546-b294-4665-9c82-092d4ab5a187"),
                            CategoryDescription = "Cá tươi, động vật có vỏ, và các sinh vật biển khác, mang lại hương vị đậm đà của đại dương.",
                            CategoryName = "Hải sản",
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = new Guid("22ee062d-4904-4c64-a783-74b3e142aac7"),
                            CategoryDescription = "Thực phẩm giàu protein, bao gồm thịt, đậu, trứng, và các loại hạt, cần thiết cho việc xây dựng và sửa chữa cơ bắp.",
                            CategoryName = "Giàu protein",
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = new Guid("78651ea5-2013-4e50-a55f-714de91a712d"),
                            CategoryDescription = "Thực phẩm có hàm lượng năng lượng (calo) thấp, thường được thiết kế để hỗ trợ kiểm soát cân nặng hoặc duy trì sức khỏe.",
                            CategoryName = "Ít calo",
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = new Guid("f63dd434-9796-46ab-95ad-759bfac51e26"),
                            CategoryDescription = "Thực phẩm giàu chất xơ, giúp thúc đẩy sức khỏe tiêu hóa, chẳng hạn như trái cây, rau và ngũ cốc nguyên hạt.",
                            CategoryName = "Giàu chất xơ",
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = new Guid("fc7f66aa-8c09-46db-a679-be440e3ed91f"),
                            CategoryDescription = "Món tráng miệng hoặc đồ ăn giàu đường, mang lại hương vị ngọt ngào, thỏa mãn.",
                            CategoryName = "Đồ ngọt",
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = new Guid("19fe32e8-9e15-486b-9398-f0116cd5019a"),
                            CategoryDescription = "Thực phẩm đã qua quá trình lên men, mang lại hương vị độc đáo và chứa probiotics, như kim chi hoặc sữa chua.",
                            CategoryName = "Lên men",
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = new Guid("bd21fd3f-8b19-4756-9da8-8ea32fc646d6"),
                            CategoryDescription = "Thực phẩm được trồng mà không sử dụng thuốc trừ sâu tổng hợp hoặc phân bón, tập trung vào tính bền vững và sức khỏe.",
                            CategoryName = "Hữu cơ",
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CategoryId = new Guid("cd017b8a-fbed-4399-99ed-b59eec9b9551"),
                            CategoryDescription = "Thực phẩm đã qua xử lý để thay đổi trạng thái tự nhiên của chúng thông qua các phương pháp như đóng hộp, đông lạnh hoặc thêm chất bảo quản.",
                            CategoryName = "Chế biến sẵn",
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Monhealth.Domain.Consultant", b =>
                {
                    b.Property<Guid>("ConsultantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ConsultantId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Consultants");
                });

            modelBuilder.Entity("Monhealth.Domain.DailyMeal", b =>
                {
                    b.Property<Guid>("DailyMealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DailyStatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MealDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("TotalCalories")
                        .HasColumnType("real");

                    b.Property<float>("TotalCarbs")
                        .HasColumnType("real");

                    b.Property<float>("TotalFats")
                        .HasColumnType("real");

                    b.Property<float>("TotalProteins")
                        .HasColumnType("real");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DailyMealId");

                    b.HasIndex("DailyStatId");

                    b.ToTable("DailyMeals");
                });

            modelBuilder.Entity("Monhealth.Domain.DailyStat", b =>
                {
                    b.Property<Guid>("DailyStatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MonthlyStatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("TotalCaloriesBurned")
                        .HasColumnType("real");

                    b.Property<float>("TotalCaloriesIntake")
                        .HasColumnType("real");

                    b.Property<float>("TotalCarbs")
                        .HasColumnType("real");

                    b.Property<float>("TotalFat")
                        .HasColumnType("real");

                    b.Property<float>("TotalProteins")
                        .HasColumnType("real");

                    b.Property<float>("TotalWaterIntake")
                        .HasColumnType("real");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DailyStatId");

                    b.ToTable("DailyStats");
                });

            modelBuilder.Entity("Monhealth.Domain.Department", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Monhealth.Domain.Food", b =>
                {
                    b.Property<Guid>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FoodId");

                    b.ToTable("Foods");

                    b.HasData(
                        new
                        {
                            FoodId = new Guid("b6fa82bc-715c-42da-af22-93290d3f2421"),
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodName = "Cơm trắng"
                        },
                        new
                        {
                            FoodId = new Guid("a3be942d-a225-44fb-9c98-22a109995145"),
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodName = "Thịt heo nạc"
                        },
                        new
                        {
                            FoodId = new Guid("f789601f-8026-499b-98cb-0f189926094a"),
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodName = "Rau muống"
                        },
                        new
                        {
                            FoodId = new Guid("52c7f28c-1d5a-470e-87cd-2be1ab0ac3db"),
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodName = "Tôm biển"
                        },
                        new
                        {
                            FoodId = new Guid("c82a256d-5573-4d27-b045-a411db42e694"),
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodName = "Xúc xích"
                        },
                        new
                        {
                            FoodId = new Guid("c567f8a9-71e4-4167-839d-a839ece79427"),
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodName = "Bỏng ngô"
                        },
                        new
                        {
                            FoodId = new Guid("00a16b6c-9396-4389-95fd-205f72fe5164"),
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodName = "Nem chua"
                        },
                        new
                        {
                            FoodId = new Guid("80c5e605-307f-4fef-bdf8-9967a800eab9"),
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodName = "Mãng cầu"
                        },
                        new
                        {
                            FoodId = new Guid("d65bff7e-4a2d-498b-97b2-676d4dd92a90"),
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodName = "Bắp luộc"
                        },
                        new
                        {
                            FoodId = new Guid("ced123e2-0b86-444b-ac83-7dba6860e354"),
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodName = "Chả giò"
                        },
                        new
                        {
                            FoodId = new Guid("d4f8f2c7-5318-4f07-803d-2b093be4d6c7"),
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodName = "Bưởi"
                        },
                        new
                        {
                            FoodId = new Guid("e34e9f9b-2d65-4e94-bcf0-37f5903c38b9"),
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodName = "Giá đỗ"
                        },
                        new
                        {
                            FoodId = new Guid("e1b0767d-4b3b-42ea-820f-2154f7883ab9"),
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodName = "Nấm kim châm"
                        },
                        new
                        {
                            FoodId = new Guid("62cd0ff3-f69e-4a5f-bc8d-94f1f94e4552"),
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodName = "Khoai tây"
                        },
                        new
                        {
                            FoodId = new Guid("dd918def-34c2-4f5c-b402-6d51d8a1c604"),
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodName = "Bầu"
                        },
                        new
                        {
                            FoodId = new Guid("b2fe4b42-56e1-4630-99e1-bb74d6d5ab2f"),
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodName = "Đậu phộng"
                        },
                        new
                        {
                            FoodId = new Guid("c4f9e44d-b7f6-4530-8b2e-b64c8f993f2a"),
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodName = "Thịt bò"
                        },
                        new
                        {
                            FoodId = new Guid("97a2fdd1-ff1f-4f5b-85cf-9f68b0cf2b91"),
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodName = "Chuối tây"
                        },
                        new
                        {
                            FoodId = new Guid("3b372064-e2a9-4729-b725-635e54e11c5d"),
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodName = "Bún tươi"
                        },
                        new
                        {
                            FoodId = new Guid("a3c8f7f1-dfe7-4e1e-9e9d-36a3c6b395b7"),
                            DateCreated = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodName = "Sầu riêng"
                        });
                });

            modelBuilder.Entity("Monhealth.Domain.FoodPortion", b =>
                {
                    b.Property<Guid>("FoodPortionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MeasurementUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortionSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortionWeight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FoodPortionId");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodPortions");
                });

            modelBuilder.Entity("Monhealth.Domain.Goal", b =>
                {
                    b.Property<Guid>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GoalId");

                    b.HasIndex("UserId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("Monhealth.Domain.InterestFood", b =>
                {
                    b.Property<Guid>("InterestFoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Categories")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Foods")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nutrition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InterestFoodId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("InterestFoods");
                });

            modelBuilder.Entity("Monhealth.Domain.Meal", b =>
                {
                    b.Property<Guid>("MealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DailyMealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("MealType")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MealId");

                    b.HasIndex("DailyMealId");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("Monhealth.Domain.MealFood", b =>
                {
                    b.Property<Guid>("MealFoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortionSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MealFoodId");

                    b.HasIndex("FoodId");

                    b.HasIndex("MealId");

                    b.ToTable("MealFoods");
                });

            modelBuilder.Entity("Monhealth.Domain.MealUserFood", b =>
                {
                    b.Property<Guid>("MealUserFoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortionSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserFoodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MealUserFoodId");

                    b.HasIndex("MealId");

                    b.HasIndex("UserFoodId");

                    b.ToTable("MealUserFoods");
                });

            modelBuilder.Entity("Monhealth.Domain.Metric", b =>
                {
                    b.Property<Guid>("MetricId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("ActivityLevel")
                        .HasColumnType("real");

                    b.Property<float>("Bmi")
                        .HasColumnType("real");

                    b.Property<float>("Bmr")
                        .HasColumnType("real");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<float>("Ibw")
                        .HasColumnType("real");

                    b.Property<string>("MetricName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Tdee")
                        .HasColumnType("real");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("MetricId");

                    b.HasIndex("UserId");

                    b.ToTable("Metrics");
                });

            modelBuilder.Entity("Monhealth.Domain.Nutrition", b =>
                {
                    b.Property<Guid>("NutritionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Calories")
                        .HasColumnType("real");

                    b.Property<float>("Carbs")
                        .HasColumnType("real");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<float>("Fat")
                        .HasColumnType("real");

                    b.Property<float>("Fiber")
                        .HasColumnType("real");

                    b.Property<Guid?>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Protein")
                        .HasColumnType("real");

                    b.Property<float>("Sugar")
                        .HasColumnType("real");

                    b.Property<Guid?>("UserFoodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NutritionId");

                    b.HasIndex("FoodId")
                        .IsUnique()
                        .HasFilter("[FoodId] IS NOT NULL");

                    b.HasIndex("UserFoodId")
                        .IsUnique()
                        .HasFilter("[UserFoodId] IS NOT NULL");

                    b.ToTable("Nutritions");
                });

            modelBuilder.Entity("Monhealth.Domain.Target", b =>
                {
                    b.Property<Guid>("TargetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("DailyCalories")
                        .HasColumnType("real");

                    b.Property<int>("DailySteps")
                        .HasColumnType("int");

                    b.Property<float>("DailyWater")
                        .HasColumnType("real");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExerciseMinutes")
                        .HasColumnType("int");

                    b.Property<Guid>("GoalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("TargetId");

                    b.HasIndex("GoalId");

                    b.ToTable("Targets");
                });

            modelBuilder.Entity("Monhealth.Domain.UserFood", b =>
                {
                    b.Property<Guid>("UserFoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeasurementUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortionSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PortionWeight")
                        .HasColumnType("real");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserFoodId");

                    b.ToTable("UserFoods");
                });

            modelBuilder.Entity("Monhealth.Domain.Vital", b =>
                {
                    b.Property<Guid>("VitalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("BloodGlucose")
                        .HasColumnType("real");

                    b.Property<string>("BloodPressure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("HeartRate")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VitalId");

                    b.HasIndex("UserId");

                    b.ToTable("Vitals");
                });

            modelBuilder.Entity("Monhealth.Identity.Models.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("322488f9-7aa9-49b0-b2b8-fd98b7b260fc"),
                            DisplayName = "Khách Hàng",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = new Guid("c0278115-8549-4fad-890a-44f8e8fcc022"),
                            DisplayName = "Quản Lí",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        });
                });

            modelBuilder.Entity("Monhealth.Identity.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("VipExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("VipStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("277ea066-d041-40ff-9dae-6271dbd6fd87"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17ff81f5-6011-47b0-a196-fe9c1a77dbbc",
                            CreatedAt = new DateTime(2024, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "quocdai@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nguyen Quoc Dai",
                            LockoutEnabled = false,
                            NormalizedEmail = "QUOCDAI@GMAIL.COM",
                            NormalizedUserName = "DAINQ115",
                            PasswordHash = "AQAAAAIAAYagAAAAEDXcTFPcvZIS1nPQr8gkLSpAeGHL3Mc/ZYKV56X2cbDzBQPVG/IPZEtQzQqrzgxy4A==",
                            PhoneNumber = "0932748924",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "96d84d4b-7431-49b2-a331-4eba095ac46c",
                            Status = true,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "dainq115"
                        },
                        new
                        {
                            Id = new Guid("9d7e87a9-b070-4607-a0b0-2d2322aece9b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c4a52a63-9c52-4ed9-84c0-6c5d1f4a43c4",
                            CreatedAt = new DateTime(2024, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "toanvan@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Van Huu Toan",
                            LockoutEnabled = false,
                            NormalizedEmail = "TOANVAN@GMAIL.COM",
                            NormalizedUserName = "VIPRO123",
                            PasswordHash = "AQAAAAIAAYagAAAAEIeU4U/LHaDGEcQrv0PgGhAbjH6Rau8paBFR3/iwSpI7M76sOTvAyFx5XPLPmzE72w==",
                            PhoneNumber = "0999998888",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d90c4e3f-cb20-4026-86aa-3812478d1366",
                            Status = true,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "vipro123"
                        },
                        new
                        {
                            Id = new Guid("0075ba2c-f60d-4f75-b9f1-f71579bc4fd2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f79d10fb-fab2-4072-8a22-e6cde680a010",
                            CreatedAt = new DateTime(2024, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "khanhpham@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nguyen Pham Khanh",
                            LockoutEnabled = false,
                            NormalizedEmail = "KHANHPHAM@GMAIL.COM",
                            NormalizedUserName = "KUEM113",
                            PasswordHash = "AQAAAAIAAYagAAAAEGkiwoAp12+enCcvffhSHWtlL5UKGKSuTk180oJmVD8MkoTnLRF2PGeTkgrYXaeAzA==",
                            PhoneNumber = "0969998878",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "53244e9c-0daa-4057-84c8-107454f4fba7",
                            Status = true,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "kuem113"
                        },
                        new
                        {
                            Id = new Guid("3b1a8845-765f-4d91-984a-4e8a9d7d376e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7394dbad-0be2-42a7-bcc1-091c67b3de82",
                            CreatedAt = new DateTime(2024, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "khaitoi@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Phan Van Khai",
                            LockoutEnabled = false,
                            NormalizedEmail = "KHAITOI@GMAIL.COM",
                            NormalizedUserName = "XAUTRAI123",
                            PasswordHash = "AQAAAAIAAYagAAAAEHeecIHntFsIURBHkgqqQMSq6IT3jcgiRzkNwxCiHqQhCqmlGDG0ZEcc62Ffw0h5BQ==",
                            PhoneNumber = "0777444499",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "34862414-4e27-4964-96b0-f1a955187050",
                            Status = true,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "xautrai123"
                        },
                        new
                        {
                            Id = new Guid("4565f47a-7239-4666-b9b4-0523b1d9ba3d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cc1c5165-da2b-4a3a-8371-5f8278a11032",
                            CreatedAt = new DateTime(2024, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "quangdalat@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Quang La Tui",
                            LockoutEnabled = false,
                            NormalizedEmail = "QUANGDALAT@GMAIL.COM",
                            NormalizedUserName = "QUANGSPA009",
                            PasswordHash = "AQAAAAIAAYagAAAAEOrwEIl44v745jKXMjtmL7/AMANL3sbmxXjfWZGvshzwFklDg0mpSqfW9Vh2Z8sXQQ==",
                            PhoneNumber = "0999777712",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "09bc154b-d4bf-410f-b92d-801ae7792488",
                            Status = true,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "quangspa09"
                        },
                        new
                        {
                            Id = new Guid("1246b8e5-af73-4aa3-bdef-b8815e21a78b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e4ace1a4-741c-44e5-9bba-74c4bacd86c8",
                            CreatedAt = new DateTime(2024, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "duythunglungtinhiu@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Pham Hoai Duy",
                            LockoutEnabled = false,
                            NormalizedEmail = "DUYTHUNGLUNGTINHIU",
                            NormalizedUserName = "DUYPRO113",
                            PasswordHash = "AQAAAAIAAYagAAAAEJeQmI1SvrBJDM8+XWjiD71KfNllhfvz3PuXeVrnHoZ/Fv+SXAFrm/oAJd2l3OPWPQ==",
                            PhoneNumber = "0555666612",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "53b8efad-4dbb-4b02-9db4-9ec8a071941f",
                            Status = true,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "duypro113"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Monhealth.Identity.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Monhealth.Identity.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Monhealth.Identity.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Monhealth.Identity.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monhealth.Identity.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Monhealth.Identity.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Monhealth.Core.FoodCategory", b =>
                {
                    b.HasOne("Monhealth.Domain.Category", "Category")
                        .WithMany("FoodCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monhealth.Domain.Food", "Food")
                        .WithMany("FoodCategories")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("Monhealth.Domain.Consultant", b =>
                {
                    b.HasOne("Monhealth.Domain.Department", "Department")
                        .WithMany("Consultants")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monhealth.Identity.Models.AppUser", "AppUser")
                        .WithOne("Consultant")
                        .HasForeignKey("Monhealth.Domain.Consultant", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Monhealth.Domain.DailyMeal", b =>
                {
                    b.HasOne("Monhealth.Domain.DailyStat", "DailyStat")
                        .WithMany("DailyMeals")
                        .HasForeignKey("DailyStatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyStat");
                });

            modelBuilder.Entity("Monhealth.Domain.FoodPortion", b =>
                {
                    b.HasOne("Monhealth.Domain.Food", "Food")
                        .WithMany("FoodPortions")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");
                });

            modelBuilder.Entity("Monhealth.Domain.Goal", b =>
                {
                    b.HasOne("Monhealth.Identity.Models.AppUser", "AppUser")
                        .WithMany("Goals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Monhealth.Domain.InterestFood", b =>
                {
                    b.HasOne("Monhealth.Identity.Models.AppUser", "AppUser")
                        .WithOne("InterestFood")
                        .HasForeignKey("Monhealth.Domain.InterestFood", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Monhealth.Domain.Meal", b =>
                {
                    b.HasOne("Monhealth.Domain.DailyMeal", "DailyMeal")
                        .WithMany("Meals")
                        .HasForeignKey("DailyMealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyMeal");
                });

            modelBuilder.Entity("Monhealth.Domain.MealFood", b =>
                {
                    b.HasOne("Monhealth.Domain.Food", "Food")
                        .WithMany("MealFoods")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monhealth.Domain.Meal", "Meal")
                        .WithMany("MealFoods")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("Monhealth.Domain.MealUserFood", b =>
                {
                    b.HasOne("Monhealth.Domain.Meal", "Meal")
                        .WithMany("MealUserFoods")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monhealth.Domain.UserFood", "UserFood")
                        .WithMany("MealUserFoods")
                        .HasForeignKey("UserFoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("UserFood");
                });

            modelBuilder.Entity("Monhealth.Domain.Metric", b =>
                {
                    b.HasOne("Monhealth.Identity.Models.AppUser", "AppUser")
                        .WithMany("Metrics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Monhealth.Domain.Nutrition", b =>
                {
                    b.HasOne("Monhealth.Domain.Food", "Food")
                        .WithOne("Nutrition")
                        .HasForeignKey("Monhealth.Domain.Nutrition", "FoodId");

                    b.HasOne("Monhealth.Domain.UserFood", "UserFood")
                        .WithOne("Nutrition")
                        .HasForeignKey("Monhealth.Domain.Nutrition", "UserFoodId");

                    b.Navigation("Food");

                    b.Navigation("UserFood");
                });

            modelBuilder.Entity("Monhealth.Domain.Target", b =>
                {
                    b.HasOne("Monhealth.Domain.Goal", "Goal")
                        .WithMany()
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("Monhealth.Domain.Vital", b =>
                {
                    b.HasOne("Monhealth.Identity.Models.AppUser", "AppUser")
                        .WithMany("Vitals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Monhealth.Domain.Category", b =>
                {
                    b.Navigation("FoodCategories");
                });

            modelBuilder.Entity("Monhealth.Domain.DailyMeal", b =>
                {
                    b.Navigation("Meals");
                });

            modelBuilder.Entity("Monhealth.Domain.DailyStat", b =>
                {
                    b.Navigation("DailyMeals");
                });

            modelBuilder.Entity("Monhealth.Domain.Department", b =>
                {
                    b.Navigation("Consultants");
                });

            modelBuilder.Entity("Monhealth.Domain.Food", b =>
                {
                    b.Navigation("FoodCategories");

                    b.Navigation("FoodPortions");

                    b.Navigation("MealFoods");

                    b.Navigation("Nutrition")
                        .IsRequired();
                });

            modelBuilder.Entity("Monhealth.Domain.Meal", b =>
                {
                    b.Navigation("MealFoods");

                    b.Navigation("MealUserFoods");
                });

            modelBuilder.Entity("Monhealth.Domain.UserFood", b =>
                {
                    b.Navigation("MealUserFoods");

                    b.Navigation("Nutrition")
                        .IsRequired();
                });

            modelBuilder.Entity("Monhealth.Identity.Models.AppUser", b =>
                {
                    b.Navigation("Consultant")
                        .IsRequired();

                    b.Navigation("Goals");

                    b.Navigation("InterestFood")
                        .IsRequired();

                    b.Navigation("Metrics");

                    b.Navigation("Vitals");
                });
#pragma warning restore 612, 618
        }
    }
}
