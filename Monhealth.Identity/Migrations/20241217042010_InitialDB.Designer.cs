// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Monhealth.Identity.Dbcontexts;

#nullable disable

namespace Monhealth.Identity.Migrations
{
    [DbContext(typeof(MonhealthDbcontext))]
    [Migration("20241217042010_InitialDB")]
    partial class InitialDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("322488f9-7aa9-49b0-b2b8-fd98b7b260fc"),
                            UserId = new Guid("277ea066-d041-40ff-9dae-6271dbd6fd87")
                        },
                        new
                        {
                            RoleId = new Guid("322488f9-7aa9-49b0-b2b8-fd98b7b260fc"),
                            UserId = new Guid("9d7e87a9-b070-4607-a0b0-2d2322aece9b")
                        },
                        new
                        {
                            RoleId = new Guid("322488f9-7aa9-49b0-b2b8-fd98b7b260fc"),
                            UserId = new Guid("0075ba2c-f60d-4f75-b9f1-f71579bc4fd2")
                        },
                        new
                        {
                            RoleId = new Guid("322488f9-7aa9-49b0-b2b8-fd98b7b260fc"),
                            UserId = new Guid("3b1a8845-765f-4d91-984a-4e8a9d7d376e")
                        },
                        new
                        {
                            RoleId = new Guid("322488f9-7aa9-49b0-b2b8-fd98b7b260fc"),
                            UserId = new Guid("4565f47a-7239-4666-b9b4-0523b1d9ba3d")
                        },
                        new
                        {
                            RoleId = new Guid("322488f9-7aa9-49b0-b2b8-fd98b7b260fc"),
                            UserId = new Guid("1246b8e5-af73-4aa3-bdef-b8815e21a78b")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Monhealth.Domain.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Monhealth.Domain.Consultant", b =>
                {
                    b.Property<Guid>("ConsultantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ConsultantId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Consultants");
                });

            modelBuilder.Entity("Monhealth.Domain.DailyMeal", b =>
                {
                    b.Property<Guid>("DailyMealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DailyStatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("MealDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("TotalCalories")
                        .HasColumnType("real");

                    b.Property<float>("TotalCarbs")
                        .HasColumnType("real");

                    b.Property<float>("TotalFats")
                        .HasColumnType("real");

                    b.Property<float>("TotalProteins")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DailyMealId");

                    b.HasIndex("DailyStatId");

                    b.ToTable("DailyMeals");
                });

            modelBuilder.Entity("Monhealth.Domain.DailyStat", b =>
                {
                    b.Property<Guid>("DailyStatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MonthlyStatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("TotalCaloriesBurned")
                        .HasColumnType("real");

                    b.Property<float>("TotalCaloriesIntake")
                        .HasColumnType("real");

                    b.Property<float>("TotalCarbs")
                        .HasColumnType("real");

                    b.Property<float>("TotalFat")
                        .HasColumnType("real");

                    b.Property<float>("TotalProteins")
                        .HasColumnType("real");

                    b.Property<float>("TotalWaterIntake")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DailyStatId");

                    b.ToTable("DailyStats");
                });

            modelBuilder.Entity("Monhealth.Domain.Department", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Monhealth.Domain.Food", b =>
                {
                    b.Property<Guid>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FoodId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("Monhealth.Domain.FoodPortion", b =>
                {
                    b.Property<Guid>("FoodPortionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PortionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FoodPortionId");

                    b.HasIndex("FoodId");

                    b.HasIndex("PortionId");

                    b.ToTable("FoodPortions");
                });

            modelBuilder.Entity("Monhealth.Domain.Goal", b =>
                {
                    b.Property<Guid>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GoalId");

                    b.HasIndex("UserId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("Monhealth.Domain.InterestFood", b =>
                {
                    b.Property<Guid>("InterestFoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Categories")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Foods")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nutrition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InterestFoodId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("InterestFoods");
                });

            modelBuilder.Entity("Monhealth.Domain.Meal", b =>
                {
                    b.Property<Guid>("MealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DailyMealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MealType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MealId");

                    b.HasIndex("DailyMealId");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("Monhealth.Domain.MealFood", b =>
                {
                    b.Property<Guid>("MealFoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PortionSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MealFoodId");

                    b.HasIndex("FoodId");

                    b.HasIndex("MealId");

                    b.ToTable("MealFoods");
                });

            modelBuilder.Entity("Monhealth.Domain.MealUserFood", b =>
                {
                    b.Property<Guid>("MealUserFoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PortionSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserFoodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MealUserFoodId");

                    b.HasIndex("MealId");

                    b.HasIndex("UserFoodId");

                    b.ToTable("MealUserFoods");
                });

            modelBuilder.Entity("Monhealth.Domain.Metric", b =>
                {
                    b.Property<Guid>("MetricId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("ActivityLevel")
                        .HasColumnType("real");

                    b.Property<float>("Bmi")
                        .HasColumnType("real");

                    b.Property<float>("Bmr")
                        .HasColumnType("real");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<float>("Ibw")
                        .HasColumnType("real");

                    b.Property<string>("MetricName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Tdee")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("MetricId");

                    b.HasIndex("UserId");

                    b.ToTable("Metrics");
                });

            modelBuilder.Entity("Monhealth.Domain.Nutrition", b =>
                {
                    b.Property<Guid>("NutritionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Calories")
                        .HasColumnType("real");

                    b.Property<float>("Carbs")
                        .HasColumnType("real");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Fat")
                        .HasColumnType("real");

                    b.Property<float>("Fiber")
                        .HasColumnType("real");

                    b.Property<Guid?>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Protein")
                        .HasColumnType("real");

                    b.Property<float>("Sugar")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserFoodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NutritionId");

                    b.HasIndex("FoodId")
                        .IsUnique()
                        .HasFilter("[FoodId] IS NOT NULL");

                    b.HasIndex("UserFoodId")
                        .IsUnique()
                        .HasFilter("[UserFoodId] IS NOT NULL");

                    b.ToTable("Nutritions");
                });

            modelBuilder.Entity("Monhealth.Domain.Portion", b =>
                {
                    b.Property<Guid>("PortionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MeasurementUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortionSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortionWeight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PortionId");

                    b.ToTable("Portions");
                });

            modelBuilder.Entity("Monhealth.Domain.Target", b =>
                {
                    b.Property<Guid>("TargetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("DailyCalories")
                        .HasColumnType("real");

                    b.Property<int>("DailySteps")
                        .HasColumnType("int");

                    b.Property<float>("DailyWater")
                        .HasColumnType("real");

                    b.Property<int>("ExerciseMinutes")
                        .HasColumnType("int");

                    b.Property<Guid>("GoalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("TargetId");

                    b.HasIndex("GoalId");

                    b.ToTable("Targets");
                });

            modelBuilder.Entity("Monhealth.Domain.UserFood", b =>
                {
                    b.Property<Guid>("UserFoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeasurementUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortionSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PortionWeight")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserFoodId");

                    b.ToTable("UserFoods");
                });

            modelBuilder.Entity("Monhealth.Domain.Vital", b =>
                {
                    b.Property<Guid>("VitalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("BloodGlucose")
                        .HasColumnType("real");

                    b.Property<string>("BloodPressure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HeartRate")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VitalId");

                    b.HasIndex("UserId");

                    b.ToTable("Vitals");
                });

            modelBuilder.Entity("Monhealth.Identity.Models.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("322488f9-7aa9-49b0-b2b8-fd98b7b260fc"),
                            DisplayName = "Khách Hàng",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = new Guid("c0278115-8549-4fad-890a-44f8e8fcc022"),
                            DisplayName = "Quản Lí",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        });
                });

            modelBuilder.Entity("Monhealth.Identity.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("VipExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("VipStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("277ea066-d041-40ff-9dae-6271dbd6fd87"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "38a6bff6-1ddb-4fda-b98c-02763c8567fa",
                            CreatedAt = new DateTime(2024, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "quocdai@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nguyen Quoc Dai",
                            LockoutEnabled = false,
                            NormalizedEmail = "QUOCDAI@GMAIL.COM",
                            NormalizedUserName = "DAINQ115",
                            PasswordHash = "AQAAAAIAAYagAAAAEKkqZjEfTGDP2Pp3E/7LARXECIA0WunR9oisXxCC9hqQVgxcQCx4b/U+mOJmhed6sQ==",
                            PhoneNumber = "0932748924",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "32231920-bf9d-4730-87e3-05af112bc08d",
                            Status = true,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "dainq115"
                        },
                        new
                        {
                            Id = new Guid("9d7e87a9-b070-4607-a0b0-2d2322aece9b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d57c4104-0acb-4c73-b32b-b24faf483cef",
                            CreatedAt = new DateTime(2024, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "toanvan@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Van Huu Toan",
                            LockoutEnabled = false,
                            NormalizedEmail = "TOANVAN@GMAIL.COM",
                            NormalizedUserName = "VIPRO123",
                            PasswordHash = "AQAAAAIAAYagAAAAEANmuUy4B8ncu2UBXhVnAwhLb1YmzjKIzqgHLOoJAra7Ny6s8RGf3je5tAhDwolFRA==",
                            PhoneNumber = "0999998888",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ae5a6f85-934b-492a-a361-957651340401",
                            Status = true,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "vipro123"
                        },
                        new
                        {
                            Id = new Guid("0075ba2c-f60d-4f75-b9f1-f71579bc4fd2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b308168-037c-4a97-8e2e-1d3014df85ee",
                            CreatedAt = new DateTime(2024, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "khanhpham@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nguyen Pham Khanh",
                            LockoutEnabled = false,
                            NormalizedEmail = "KHANHPHAM@GMAIL.COM",
                            NormalizedUserName = "KUEM113",
                            PasswordHash = "AQAAAAIAAYagAAAAENjPpl8kNks9YfSLbPXlihAmmcRmyq/46bp3ZkjbgrApElEe6JM5SUxSH9/DHljJlA==",
                            PhoneNumber = "0969998878",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d4fce73f-174b-4fd3-bce3-e37c0953de47",
                            Status = true,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "kuem113"
                        },
                        new
                        {
                            Id = new Guid("3b1a8845-765f-4d91-984a-4e8a9d7d376e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e54007ca-729f-4b94-b5a8-37e447ec0528",
                            CreatedAt = new DateTime(2024, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "khaitoi@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Phan Van Khai",
                            LockoutEnabled = false,
                            NormalizedEmail = "KHAITOI@GMAIL.COM",
                            NormalizedUserName = "XAUTRAI123",
                            PasswordHash = "AQAAAAIAAYagAAAAEDzMdUs2c53Gx1WDbAeTd9RwPwNf47k+DmMpQPN9YfiNlf+lklldo1v1hUeHTuUNXA==",
                            PhoneNumber = "0777444499",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "85826275-0a95-4977-bc31-74a85e76539c",
                            Status = true,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "xautrai123"
                        },
                        new
                        {
                            Id = new Guid("4565f47a-7239-4666-b9b4-0523b1d9ba3d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "be6f8419-e830-4afc-8a0e-b09bba676700",
                            CreatedAt = new DateTime(2024, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "quangdalat@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Quang La Tui",
                            LockoutEnabled = false,
                            NormalizedEmail = "QUANGDALAT@GMAIL.COM",
                            NormalizedUserName = "QUANGSPA009",
                            PasswordHash = "AQAAAAIAAYagAAAAEEusl152msgFwHBmgHSmQx4dei0zTJoJNu756F4WTNsQgdFK0XFFOQI+onk1nFI9dQ==",
                            PhoneNumber = "0999777712",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4252dcbf-8a8b-4d3f-a9f6-e68f78a64f82",
                            Status = true,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "quangspa09"
                        },
                        new
                        {
                            Id = new Guid("1246b8e5-af73-4aa3-bdef-b8815e21a78b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4aceba6d-9ef7-4fcd-8413-c2d37b380ec5",
                            CreatedAt = new DateTime(2024, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "duythunglungtinhiu@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Pham Hoai Duy",
                            LockoutEnabled = false,
                            NormalizedEmail = "DUYTHUNGLUNGTINHIU",
                            NormalizedUserName = "DUYPRO113",
                            PasswordHash = "AQAAAAIAAYagAAAAEEfnCFdTF7lnJoVgN8iQJk5/kKVOEPpIMPgr623aQKgBj8JXvj5lu8eHUSRZlMLJnw==",
                            PhoneNumber = "0555666612",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f0611718-bec8-45fa-acdc-1874b8cf1279",
                            Status = true,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "duypro113"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Monhealth.Identity.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Monhealth.Identity.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Monhealth.Identity.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Monhealth.Identity.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monhealth.Identity.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Monhealth.Identity.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Monhealth.Domain.Consultant", b =>
                {
                    b.HasOne("Monhealth.Domain.Department", "Department")
                        .WithMany("Consultants")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monhealth.Identity.Models.AppUser", "AppUser")
                        .WithOne("Consultant")
                        .HasForeignKey("Monhealth.Domain.Consultant", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Monhealth.Domain.DailyMeal", b =>
                {
                    b.HasOne("Monhealth.Domain.DailyStat", "DailyStat")
                        .WithMany("DailyMeals")
                        .HasForeignKey("DailyStatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyStat");
                });

            modelBuilder.Entity("Monhealth.Domain.Food", b =>
                {
                    b.HasOne("Monhealth.Domain.Category", "Category")
                        .WithMany("Foods")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Monhealth.Domain.FoodPortion", b =>
                {
                    b.HasOne("Monhealth.Domain.Food", "Food")
                        .WithMany("FoodPortions")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monhealth.Domain.Portion", "Portion")
                        .WithMany("FoodPortions")
                        .HasForeignKey("PortionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Portion");
                });

            modelBuilder.Entity("Monhealth.Domain.Goal", b =>
                {
                    b.HasOne("Monhealth.Identity.Models.AppUser", "AppUser")
                        .WithMany("Goals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Monhealth.Domain.InterestFood", b =>
                {
                    b.HasOne("Monhealth.Identity.Models.AppUser", "AppUser")
                        .WithOne("InterestFood")
                        .HasForeignKey("Monhealth.Domain.InterestFood", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Monhealth.Domain.Meal", b =>
                {
                    b.HasOne("Monhealth.Domain.DailyMeal", "DailyMeal")
                        .WithMany("Meals")
                        .HasForeignKey("DailyMealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyMeal");
                });

            modelBuilder.Entity("Monhealth.Domain.MealFood", b =>
                {
                    b.HasOne("Monhealth.Domain.Food", "Food")
                        .WithMany("MealFoods")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monhealth.Domain.Meal", "Meal")
                        .WithMany("MealFoods")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("Monhealth.Domain.MealUserFood", b =>
                {
                    b.HasOne("Monhealth.Domain.Meal", "Meal")
                        .WithMany("MealUserFoods")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monhealth.Domain.UserFood", "UserFood")
                        .WithMany("MealUserFoods")
                        .HasForeignKey("UserFoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("UserFood");
                });

            modelBuilder.Entity("Monhealth.Domain.Metric", b =>
                {
                    b.HasOne("Monhealth.Identity.Models.AppUser", "AppUser")
                        .WithMany("Metrics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Monhealth.Domain.Nutrition", b =>
                {
                    b.HasOne("Monhealth.Domain.Food", "Food")
                        .WithOne("Nutrition")
                        .HasForeignKey("Monhealth.Domain.Nutrition", "FoodId");

                    b.HasOne("Monhealth.Domain.UserFood", "UserFood")
                        .WithOne("Nutrition")
                        .HasForeignKey("Monhealth.Domain.Nutrition", "UserFoodId");

                    b.Navigation("Food");

                    b.Navigation("UserFood");
                });

            modelBuilder.Entity("Monhealth.Domain.Target", b =>
                {
                    b.HasOne("Monhealth.Domain.Goal", "Goal")
                        .WithMany()
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("Monhealth.Domain.Vital", b =>
                {
                    b.HasOne("Monhealth.Identity.Models.AppUser", "AppUser")
                        .WithMany("Vitals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Monhealth.Domain.Category", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("Monhealth.Domain.DailyMeal", b =>
                {
                    b.Navigation("Meals");
                });

            modelBuilder.Entity("Monhealth.Domain.DailyStat", b =>
                {
                    b.Navigation("DailyMeals");
                });

            modelBuilder.Entity("Monhealth.Domain.Department", b =>
                {
                    b.Navigation("Consultants");
                });

            modelBuilder.Entity("Monhealth.Domain.Food", b =>
                {
                    b.Navigation("FoodPortions");

                    b.Navigation("MealFoods");

                    b.Navigation("Nutrition")
                        .IsRequired();
                });

            modelBuilder.Entity("Monhealth.Domain.Meal", b =>
                {
                    b.Navigation("MealFoods");

                    b.Navigation("MealUserFoods");
                });

            modelBuilder.Entity("Monhealth.Domain.Portion", b =>
                {
                    b.Navigation("FoodPortions");
                });

            modelBuilder.Entity("Monhealth.Domain.UserFood", b =>
                {
                    b.Navigation("MealUserFoods");

                    b.Navigation("Nutrition")
                        .IsRequired();
                });

            modelBuilder.Entity("Monhealth.Identity.Models.AppUser", b =>
                {
                    b.Navigation("Consultant")
                        .IsRequired();

                    b.Navigation("Goals");

                    b.Navigation("InterestFood")
                        .IsRequired();

                    b.Navigation("Metrics");

                    b.Navigation("Vitals");
                });
#pragma warning restore 612, 618
        }
    }
}
